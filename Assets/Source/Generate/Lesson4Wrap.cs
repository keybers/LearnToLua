//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lesson4Wrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lesson4), typeof(System.Object));
		L.RegFunction("Speak", Speak);
		L.RegFunction("Eat", Eat);
		L.RegFunction("Move", Move);
		L.RegFunction("New", _CreateLesson4);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("name", get_name, set_name);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLesson4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Lesson4 obj = new Lesson4();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Lesson4.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Speak(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lesson4 obj = (Lesson4)ToLua.CheckObject<Lesson4>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Speak(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Eat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Lesson4.Eat();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Move(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lesson4 obj = (Lesson4)ToLua.CheckObject<Lesson4>(L, 1);
			obj.Move();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lesson4 obj = (Lesson4)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lesson4 obj = (Lesson4)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}
}

