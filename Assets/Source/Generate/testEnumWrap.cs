//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class testEnumWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(testEnum));
		L.RegVar("Idle", get_Idle, null);
		L.RegVar("Walk", get_Walk, null);
		L.RegVar("Attack", get_Attack, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<testEnum>.Check = CheckType;
		StackTraits<testEnum>.Push = Push;
	}

	static void Push(IntPtr L, testEnum arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(testEnum), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle(IntPtr L)
	{
		ToLua.Push(L, testEnum.Idle);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Walk(IntPtr L)
	{
		ToLua.Push(L, testEnum.Walk);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Attack(IntPtr L)
	{
		ToLua.Push(L, testEnum.Attack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		testEnum o = (testEnum)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

